<div class="row">
  <div class="col-md-12">

  <%# this create margin-left to col-md-3 %>
  <div class="col-md-3">
  </div>
   <%# this create margin-left to col-md-3 %>  

      <%= form_for @organization, :html => { :id => "form" } do |f| %>

      <div class="col-md-6 background">   

        <div class="form-group ">
            <label>Organization Name</label>
              <%=f.text_field :name, class: "form-control input-lg"%>
        </div>

        <div class="form-group ">
            <label>Email</label>
            <%=f.text_field :email, class: "form-control input-lg" %>
        </div>

        <div class="form-group">
            <label>Phone Number</label>    
            <%=f.text_field :number, class: "form-control input-lg" %>
        </div>

        <div class="form-group ">
            <div class="form-group">
            <label>Services</label>
            <%= f.select( :service, %w[Health Education Community-Center Sport], prompt: "Select...", class: "form-control input-lg")%>
          </div>
        </div>

        <div class="form-group">
              <label>About</label>
              <%=f.text_area :about, class: "form-control input-lg" %>
        </div>
        
        <div class="form-group">
            <label>Address</label>
                <%=f.text_field :address, id:"pac-input",placeholder:"Where is your address?", class: "form-control"%><br>
                <%=f.text_field :latitude, id:"lat", style:"display:none;"%>
                <%=f.text_field :longitude, id:"long", style:"display:none;"%>
      
            <div class="pac-card" id="pac-card">
                <div id="latitude" data-lat= "<%= @organization.latitude %>">
                  <div id="type-selector" class="pac-controls"></div>
                  <div id="strict-bounds-selector" class="pac-controls"></div>
                </div>  
            </div>
        </div>     
      </div>
  
 </div>
</div>


<div class="row">
  <div class="col-md-12">
    <div class="col-md-3"></div>
      <div class="col-md-6 map-box background">
          <div class="map-image map-radius" id="map" ></div>
    
            <div class="col-md-5 submitbtn">
              <div class="row" id="longtitude" data-long= "<%= @organization.longitude%>">
                  <%= f.submit "Save", class: "btn btn-success" %>
              </div>
            <div>
          <% end %>
      </div>
        
  </div>
</div>





<script>
      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
      function initMap() {
        var lt = parseFloat(document.querySelector("#latitude").dataset["lat"])
        var ln = parseFloat(document.querySelector("#longtitude").dataset["long"])
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: lt, lng: ln},
          zoom: 14
        });
        console.log(lt)
                console.log(ln)
        var card = document.getElementById('pac-card');
        var input = document.getElementById('pac-input');
        var types = document.getElementById('type-selector');
        var strictBounds = document.getElementById('strict-bounds-selector');
        map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);
        var autocomplete = new google.maps.places.Autocomplete(input);
        // Bind the map's bounds (viewport) property to the autocomplete object,
        // so that the autocomplete requests use the current map bounds for the
        // bounds option in the request.
        autocomplete.bindTo('bounds', map);
        // Set the data fields to return when the user selects a place.
        autocomplete.setFields(
            ['address_components', 'geometry', 'icon', 'name']);
        var lt = parseFloat(document.querySelector("#latitude").dataset["lat"])
        var ln = parseFloat(document.querySelector("#longtitude").dataset["long"])
        var infowindow = new google.maps.InfoWindow();
        var infowindowContent = document.getElementById('infowindow-content');
        infowindow.setContent(infowindowContent);
        var marker = new google.maps.Marker({
          map: map,
          anchorPoint: new google.maps.Point(0, -29)
        });
        autocomplete.addListener('place_changed', function() {
          infowindow.close();
          marker.setVisible(false);
          var place = autocomplete.getPlace();
          
          if (!place.geometry) {
            // User entered the name of a Place that was not suggested and
            // pressed the Enter key, or the Place Details request failed.
            window.alert("No details available for input: '" + place.name + "'");
            return;
          }
          document.querySelector("#lat").value = place.geometry.location.lat();
          document.querySelector("#long").value = place.geometry.location.lng();
          var form = document.querySelector("#form");
          form.addEventListener('submit', function() {
          });
          // If the place has a geometry, then present it on a map.
          if (place.geometry.viewport) {
            map.fitBounds(place.geometry.viewport);
          } else {
            map.setCenter(place.geometry.location);
            map.setZoom(17);  // Why 17? Because it looks good.
          }
          marker.setPosition(place.geometry.location);
          marker.setVisible(true);
          
          var address = '';
          if (place.address_components) {
            address = [
              (place.address_components[0] && place.address_components[0].short_name || ''),
              (place.address_components[1] && place.address_components[1].short_name || ''),
              (place.address_components[2] && place.address_components[2].short_name || '')
            ].join(' ');
          }
          infowindowContent.children['place-icon'].src = place.icon;
          infowindowContent.children['place-name'].textContent = place.name;
          infowindowContent.children['place-address'].textContent = address;
          infowindow.open(map, marker);
        });
        // Sets a listener on a radio button to change the filter type on Places
        // Autocomplete.
        function setupClickListener(id, types) {
          var radioButton = document.getElementById(id);
          radioButton.addEventListener('click', function() {
            autocomplete.setTypes(types);
          });
        }
        setupClickListener('changetype-all', []);
        setupClickListener('changetype-address', ['address']);
        setupClickListener('changetype-establishment', ['establishment']);
        setupClickListener('changetype-geocode', ['geocode']);
        document.getElementById('use-strict-bounds')
            .addEventListener('click', function() {
              console.log('Checkbox clicked! New state=' + this.checked);
              autocomplete.setOptions({strictBounds: this.checked});
            });
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCLwih_dEjx7rHvO04och6w_zABvfO8Dcw&libraries=places&callback=initMap"
        async defer></script>